# -*- coding: utf-8 -*-
# -----------------------------------------------------------------------------
# Copyright 2015-2016 by EcpyHqcLegacy Authors, see AUTHORS for more details.
#
# Distributed under the terms of the BSD license.
#
# The full license is in the file LICENCE, distributed with this software.
# -----------------------------------------------------------------------------
"""The manifest contributing the extensions to the main application.

"""
from __future__ import (division, unicode_literals, print_function,
                        absolute_import)

from enaml.workbench.api import PluginManifest, Extension
from ecpy.tasks.api import Tasks, Task, Interface
from ecpy.instruments.api import Starter, Connection, Drivers, Driver

from .instruments.starters.legacy_starter import (VisaLegacyStarter,
                                                  DllLegacyStarter)


enamldef HqcLegacyManifest(PluginManifest):
    """The manifest declaring the extension points to the Ecpy.

    """
    id = 'ecpy_hqc_legacy'

    Extension:
        id = 'instruments.starters'
        point = 'ecpy.instruments.starters'
        Starter:
            id = 'ecpy_hqc_legacy.starter.visa'
            description = ('Starter for legacy instrument relying on the VISA '
                          'protocol')
            starter = VisaLegacyStarter()

        Starter:
            id = 'ecpy_hqc_legacy.starter.dll'
            description = ('Starter for legacy instruments using a custom dll '
                           'for communication.')
            starter = DllLegacyStarter()

    Extension:
        id = 'instruments.connections'
        point = 'ecpy.instruments.connections'
        Connection:
            id = 'ecpy_hqc_legacy.dll_serial_number_connection'
            description = ('Connection for instruments communicating via a '
                           'DLL and identified by their serial number.')
            new => (workbench, defaults):
                from .instruments.connections.dll_serial_number_connection\
                    import DLLSerialNumberConnection
                defaults = dict(lib_path=defaults.get('lib_path', ''),
                                serial_number=default.get('serial_number', ''))
                return DLLSerialNumberConnection(**defaults)

    Extension:
        id = 'instruments.drivers'
        point = 'ecpy.instruments.drivers'
        Drivers:
            path = 'ecpy_hqc_legacy.instruments.drivers'
            architecture = 'Legacy'
            Drivers:
                path = 'visa'
                starter = 'ecpy_hqc_legacy.starter.visa'
                Drivers:
                    manufacturer = 'Keysight'
                    Driver:
                        driver = 'agilent_multimeters:Agilent34410A'
                        model = '34410A'
                        kind = 'Multimeter'
                        connections = {'VisaGPIB': {'resource_class': 'INSTR'},
                                       'VisaUSB': {'resource_class': 'INSTR'},
                                       'VisaTCPIP': {'resource_class': 'INSTR'}
                                       }
                    Driver:
                        driver = 'agilent_pna:AgilentPNA'
                        model = 'PNA'
                        connections = {'VisaGPIB': {'resource_class': 'INSTR'},
                                       'VisaUSB': {'resource_class': 'INSTR'},
                                       'VisaTCPIP': {'resource_class': 'INSTR'}
                                       }
                    Driver:
                        driver = 'agilent_psg_signal_generators:AgilentPSG'
                        serie = 'PSG'
                        model = 'E8257D'
                        kind = 'RF source'
                        connections = {'VisaGPIB': {'resource_class': 'INSTR'},
                                       'VisaUSB': {'resource_class': 'INSTR'},
                                       'VisaTCPIP': {'resource_class': 'INSTR'}
                                       }
                Drivers:
                    manufacturer = 'Yokogawa'
                    Driver:
                        driver = 'yokogawa:YokogawaGS200'
                        model = 'GS200'
                        kind = 'DC source'
                        connections = {'VisaGPIB': {'resource_class': 'INSTR'},
                                       'VisaUSB': {'resource_class': 'INSTR',
                                                   'manufacturer_id': '0xB21',
                                                   'model_code': '0x39'},
                                       }
                    Driver:
                        driver = 'yokogawa:Yokogawa7651'
                        model = '7651'
                        kind = 'DC source'
                        connections = {'VisaGPIB': {'resource_class': 'INSTR'},
                                       'VisaRS232':
                                           {'ressource_class': 'INSTR'}
                                       }
                Drivers:
                    manufacturer = 'Keithley'
                    Driver:
                        driver = 'keithley_multimeters:Keithley2000'
                        model = '2000'
                        kind = 'Multimeter'
                        connections = {'VisaGPIB': {'resource_class': 'INSTR'},
                                       'VisaRS232':
                                           {'ressource_class': 'INSTR'}
                                       }
                Drivers:
                    manufacturer = 'Oxford'
                    Driver:
                        driver = 'oxford_ips:IPS12010'
                        model  = 'IPS120-10'
                        connections = {'VisaGPIB': {'resource_class': 'INSTR'},
                                       'VisaRS232':
                                           {'ressource_class': 'INSTR'}
                                       }
                Drivers:
                    manufacturer = 'Tektronix'
                    Driver:
                        driver = 'tektro_awg:AWG'
                        model = 'AWG5014C'
                        kind = 'AWG'
                        connections = {'VisaGPIB': {'resource_class': 'INSTR'},
                                       'VisaUSB': {'resource_class': 'INSTR'},
                                       'VisaTCPIP': {'resource_class': 'INSTR',
                                                     'lan_device_name': 'inst0'}
                                       }
                Drivers:
                    manufacturer = 'Signal recovery'
                    Driver:
                        driver = 'lock_in_sr72_series:LockInSR7265'
                        model = '7265'
                        kind = 'Lock-in'
                        connections = {'VisaGPIB': {'resource_class': 'INSTR'},
                                       'VisaRS232':
                                           {'ressource_class': 'INSTR'}
                                       }
                    Driver:
                        driver = 'lock_in_sr72_series:LockInSR7270'
                        model = '7270'
                        kind = 'Lock-in'
                        connections = {'VisaTCPIP':
                                           {'port': 50000,
                                            'resource_class': 'SOCKET'}
                                       }
                Drivers:
                    manufacturer = 'Anritsu'
                    Driver:
                        driver = 'anritsu_signal_source:AnritsuMG3694'
                        model = 'MG3694'
                        kind = 'RF source'
                        connections = {'VisaGPIB': {'resource_class': 'INSTR'}
                                       }
                Drivers:
                    manufacturer = 'Bilt'
                    Driver:
                        driver = 'tinybuilt:TinyBilt'
                        model = 'BN100'
                        kind = 'DC source'
                        connections = {'VisaGPIB': {'resource_class': 'INSTR'},
                                       'VisaUSB': {'resource_class': 'INSTR'},
                                       'VisaTCPIP': {'resource_class': 'INSTR'}
                                       }
                Drivers:
                    manufacturer = 'Standford instruments'
                    Driver:
                        driver = 'lock_in_sr830:LockInSR830'
                        model = 'SR830'
                        kind = 'Lock-in'
                        connections = {'VisaGPIB': {'resource_class': 'INSTR'},
                                       'VisaRS232':
                                           {'ressource_class': 'INSTR'}
                                       }
            Drivers:
                path = 'dll'
                starter = 'ecpy_hqc_legacy.starter.dll'
                connections = {'ecpy_hqc_legacy.dll_serial_number_connection':
                               {}}
                Driver:
                    driver = 'sp_adq14:SPADQ14'
                    manufacturer = 'SPDevices'
                    model = 'ADQ14'

    Extension:
        id = 'ecpy_hqc_legacy.tasks'
        point = 'ecpy.tasks.declarations'
        Tasks:
            path = 'ecpy_hqc_legacy.tasks.tasks'
            Tasks:
                path = 'util'
                group = 'util'
                Task:
                    task = 'array_tasks:ArrayExtremaTask'
                    view = 'views.array_views:ArrayExtremaView'
                Task:
                    task = 'array_tasks:ArrayFindValueTask'
                    view = 'views.array_views:ArrayFindValueView'
                Task:
                    task = 'load_tasks:LoadArrayTask'
                    view = 'views.load_views:LoadArrayView'
                    Interface:
                        interface = 'load_tasks:CSVLoadInterface'
                        views = ['views.load_views:CSVLoadInterfaceView']
                Task:
                    task = 'save_tasks:SaveTask'
                    view = 'views.save_views:SaveView'
                Task:
                    task = 'save_tasks:SaveFileTask'
                    view = 'views.save_views:SaveFileView'
                Task:
                    task = 'save_tasks:SaveFileHDF5Task'
                    view = 'views.save_views:SaveFileHDF5View'
                Task:
                    task = 'save_tasks:SaveArrayTask'
                    view = 'views.save_views:SaveArrayView'
            Tasks:
                path = 'instr'
                group = 'instr'
                Task:
                    task = 'apply_mag_field_task:ApplyMagFieldTask'
                    view = 'views.apply_mag_field_view:ApplyMagFieldView'
                    instruments = ['ecpy_hqc_legacy.Legacy.IPS12010']
                    metadata = {'loopable': True}
                Task:
                    task = 'lock_in_measure_task:LockInMeasureTask'
                    view = 'views.lock_in_meas_view:LockInMeasView'
                    instruments = ['ecpy_hqc_legacy.Legacy.SR7265LI',
                                   'ecpy_hqc_legacy.Legacy.SR830']
                Task:
                    task = 'meas_dc_tasks:MeasDCVoltageTask'
                    view = 'views.meas_dc_views:MeasDCVoltView'
                    instruments = ['ecpy_hqc_legacy.Legacy.Keithley2000',
                                   'ecpy_hqc_legacy.Legacy.Agilent34410A']
                Task:
                    task = 'rf_tasks:SetRFFrequencyTask'
                    view = 'views.rf_views:RFFrequencyView'
                    instruments = ['ecpy_hqc_legacy.Legacy.AgilentPSG',
                                   'ecpy_hqc_legacy.Legacy.AnritsuMG3694',
                                   'ecpy_hqc_legacy.Legacy.LabBrickLMS103']
                    metadata = {'loopable': True}
                    Interface:
                        interface = 'pna_tasks:PNASetRFFrequencyInterface'
                        views = ['views.pna_task_views:IPNAChannelLabel',
                                 'views.pna_task_views:IPNAChannelValue']
                        instruments = ['ecpy_hqc_legacy.Legacy.AgilentPNA']
                Task:
                    task = 'rf_tasks:SetRFPowerTask'
                    view = 'views.rf_views:RFPowerView'
                    instruments = ['ecpy_hqc_legacy.Legacy.AgilentPSG',
                                   'ecpy_hqc_legacy.Legacy.AnritsuMG3694',
                                   'ecpy_hqc_legacy.Legacy.LabBrickLMS103']
                    metadata = {'loopable': True}
                    Interface:
                        interface = 'pna_tasks:PNASetRFPowerInterface'
                        views = ['views.pna_task_views:IPNAChannelLabel',
                                 'views.pna_task_views:IPNAChannelValue',
                                 'views.pna_task_views:IPNAPortLabel',
                                 'views.pna_task_views:IPNAPortValue']
                        instruments = ['ecpy_hqc_legacy.Legacy.AgilentPNA']
                Task:
                    task = 'rf_tasks:SetRFOnOffTask'
                    view = 'views.rf_views:RFSetOnOffView'
                    instruments = ['ecpy_hqc_legacy.Legacy.AgilentPSG',
                                   'ecpy_hqc_legacy.Legacy.AnritsuMG3694',
                                   'ecpy_hqc_legacy.Legacy.LabBrickLMS103']
                    metadata = {'loopable': True}
                Task:
                    task = 'pna_tasks:PNASinglePointMeasureTask'
                    view = 'views.pna_task_views:PNASinglePointView'
                    instruments = ['ecpy_hqc_legacy.Legacy.AgilentPNA']
                Task:
                    task = 'pna_tasks:PNASweepTask'
                    view = 'views.pna_task_views:PNASweepMeasView'
                    instruments = ['ecpy_hqc_legacy.Legacy.AgilentPNA']
                Task:
                    task = 'pna_tasks:PNAGetTraces'
                    view = 'views.pna_task_views:PNAGetTraceView'
                    instruments = ['ecpy_hqc_legacy.Legacy.AgilentPNA']
                Task:
                    task = 'set_dc_voltage_task:SetDCVoltageTask'
                    view = 'views.set_dc_voltage_view:SetDcVoltageView'
                    instruments = ['ecpy_hqc_legacy.Legacy.YokogawaGS200',
                                   'ecpy_hqc_legacy.Legacy.Yokogawa7651']
                    metadata = {'loopable': True}
                    Interface:
                        interface = ('set_dc_voltage_task:'
                                     'MultiChannelVoltageSourceInterface')
                        views = ['views.set_dc_voltage_view:'
                                 'MultiChannelVoltageSourceILabel',
                                 'views.set_dc_voltage_view:'
                                 'MultiChannelVoltageSourceIChannel']
                        instruments = ['ecpy_hqc_legacy.Legacy.TinyBilt']
                Task:
                    task = 'spdev_tasks:DemodSPTask'
                    view = 'views.spdev_views:DemodSpView'
                    instruments = ['ecpy_hqc_legacy.Legacy.ADQ14']
