# -*- coding: utf-8 -*-
# -----------------------------------------------------------------------------
# Copyright 2015-2016 by EcpyHqcLegacy Authors, see AUTHORS for more details.
#
# Distributed under the terms of the BSD license.
#
# The full license is in the file LICENCE, distributed with this software.
# -----------------------------------------------------------------------------
"""The manifest contributing the extensions to the main application.

"""
from __future__ import (division, unicode_literals, print_function,
                        absolute_import)

from enaml.workbench.api import PluginManifest, Extension
from ecpy.tasks.api import Tasks, Task, Interface


enamldef HqcLegacyManifest(PluginManifest):
    """The manifest declaring the extension points to the Ecpy.

    """
    id = 'ecpy_hqc_legacy'

    Extension:
        point = 'ecpy.tasks.declarations'
        Tasks:
            path = 'ecpy_hqc_legacy.tasks.tasks'
            Tasks:
                path = 'util'
                group = 'util'
                Task:
                    task = 'array_tasks:ArrayExtremaTask'
                    view = 'views.array_views:ArrayExtremaView'
                Task:
                    task = 'array_tasks:ArrayFindValueTask'
                    view = 'views.array_views:ArrayFindValueView'
                Task:
                    task = 'load_tasks:LoadArrayTask'
                    view = 'views.load_views:LoadArrayView'
                    Interface:
                        interface = 'load_tasks:CSVLoadInterface'
                        views = ['views.load_views:CSVLoadInterfaceView']
                Task:
                    task = 'save_tasks:SaveTask'
                    view = 'views.save_views:SaveView'
                Task:
                    task = 'save_tasks:SaveFileTask'
                    view = 'views.save_views:SaveFileView'
                Task:
                    task = 'save_tasks:SaveFileHDF5Task'
                    view = 'views.save_views:SaveFileHDF5View'
                Task:
                    task = 'save_tasks:SaveArrayTask'
                    view = 'views.save_views:SaveArrayView'
            Tasks:
                path = 'instr'
                group = 'instr'
                Task:
                    task = 'apply_mag_field_task:ApplyMagFieldTask'
                    view = 'views.apply_mag_field_view:ApplyMagFieldView'
                    instruments = ['ecpy_hqc_legacy.IPS12010']
                    metadata = {'loopable': True}
                Task:
                    task = 'lock_in_measure_task:LockInMeasureTask'
                    view = 'views.lock_in_meas_view:LockInMeasView'
                    instruments = ['ecpy_hqc_legacy.SR7265LI',
                                   'ecpy_hqc_legacy.SR830']
                Task:
                    task = 'meas_dc_tasks:MeasDCVoltageTask'
                    view = 'views.meas_dc_views:MeasDCVoltView'
                    instruments = ['ecpy_hqc_legacy.Keithley2000',
                                   'ecpy_hqc_legacy.Agilent34410A']
                Task:
                    task = 'rf_tasks:SetRFFrequencyTask'
                    view = 'views.rf_views:RFFrequencyView'
                    instruments = ['ecpy_hqc_legacy.AgilentE8257D',
                                   'ecpy_hqc_legacy.AnritsuMG3694',
                                   'ecpy_hqc_legacy.LabBrickLMS103']
                    metadata = {'loopable': True}
                    Interface:
                        interface = 'pna_tasks:PNASetRFFrequencyInterface'
                        views = ['views.pna_task_views:IPNAChannelLabel',
                                 'views.pna_task_views:IPNAChannelValue']
                        instruments = ['ecpy_hqc_legacy.AgilentPNA']
                Task:
                    task = 'rf_tasks:SetRFPowerTask'
                    view = 'views.rf_views:RFPowerView'
                    instruments = ['ecpy_hqc_legacy.AgilentE8257D',
                                   'ecpy_hqc_legacy.AnritsuMG3694',
                                   'ecpy_hqc_legacy.LabBrickLMS103']
                    metadata = {'loopable': True}
                    Interface:
                        interface = 'pna_tasks:PNASetRFPowerInterface'
                        views = ['views.pna_task_views:IPNAChannelLabel',
                                 'views.pna_task_views:IPNAChannelValue',
                                 'views.pna_task_views:IPNAPortLabel',
                                 'views.pna_task_views:IPNAPortValue']
                        instruments = ['ecpy_hqc_legacy:AgilentPNA']
                Task:
                    task = 'rf_tasks:SetRFOnOffTask'
                    view = 'views.rf_views:RFSetOnOffView'
                    instruments = ['ecpy_hqc_legacy.AgilentE8257D',
                                   'ecpy_hqc_legacy.AnritsuMG3694',
                                   'ecpy_hqc_legacy.LabBrickLMS103']
                    metadata = {'loopable': True}
                Task:
                    task = 'pna_tasks:PNASinglePointMeasureTask'
                    view = 'views.pna_task_views:PNASinglePointView'
                    instruments = ['ecpy_hqc_legacy.AgilentPNA']
                Task:
                    task = 'pna_tasks:PNASweepTask'
                    view = 'views.pna_task_views:PNASweepMeasView'
                    instruments = ['ecpy_hqc_legacy.AgilentPNA']
                Task:
                    task = 'pna_tasks:PNAGetTraces'
                    view = 'views.pna_task_views:PNAGetTraceView'
                    instruments = ['ecpy_hqc_legacy.AgilentPNA']
                Task:
                    task = 'set_dc_voltage_task:SetDCVoltageTask'
                    view = 'views.set_dc_voltage_view:SetDcVoltageView'
                    instruments = ['ecpy_hqc_legacy.YokogawaGS200',
                                   'ecpy_hqc_legacy.Yogogawa7651']
                    metadata = {'loopable': True}
                    Interface:
                        interface = ('set_dc_voltage_task:'
                                     'MultiChannelVoltageSourceInterface')
                        views = ['views.set_dc_voltage_view:'
                                 'MultiChannelVoltageSourceILabel',
                                 'views.set_dc_voltage_view:'
                                 'MultiChannelVoltageSourceIChannel']
                        instruments = ['ecpy_hqc_legacy.TinyBilt']
