# -*- coding: utf-8 -*-
# -----------------------------------------------------------------------------
# Copyright 2015-2016 by EcpyHqcLegacy Authors, see AUTHORS for more details.
#
# Distributed under the terms of the BSD license.
#
# The full license is in the file LICENCE, distributed with this software.
# -----------------------------------------------------------------------------
"""View mimoicking the old behavior of the instrument task view.

"""
from __future__ import (division, unicode_literals, print_function,
                        absolute_import)


enamldef InstrView(InstrTaskView):
    """Automatic selection of interface and insertion of the views based on
    index.

    """
    #: List of currently inserted interface widgets.
    attr i_views

    #: Interfaces infos used to instantiate the views.
    attr _interfaces

    initialized ::
        cmd = 'ecpy.tasks.get_task_infos'
        infos = self.root.core.invoke_command(cmd,
                                              {'task': self.task.task_id})

        self._interfaces = infos.interfaces

        if self.task.interface:
            self._insert_interface_views(self.task.interface)

        self._bind_observers()

    destroyed ::
        self._unbind_observers()

    func _update_interface(change):
        """Update the interface when the selected format change.

        """
        interface = self.task.interface
        self.select_interface()
        if type(self.task.interface) != interface:
            # Destroy the views associated with the ancient interface.
            for i_v in self.i_views:
                i_v.destroy()

        if self.task.interface:

            self._insert_interface_views(self.task.interface)

    func _insert_interface_views(interface):
        """Insert the views associated with the selected interface.

        """
        i_infos = self._interfaces[interface.interface_id[0]]
        if i_infos.views:
            i_views = [v(self, interface=self.task.interface)
                       for v in i_infos.views]
            # TODO handle more complex insertions.
            if hasattr(i_views[0], 'index'):
                self.insert_children(i_views[0].index, i_views)
            else:
                self.insert_children(None, i_views)

            self.i_views = tuple(i_views)

        else:
            self.i_views = ()

    func _bind_observers():
        """ Bind the observers at widget initialisation.

        """
        self.task.observe('selected_instrument', self._update_interface)

    func _unbind_observers():
        """ Undind the observers at widget destruction.

        """
        self.task.unobserve('selected_instrument', self._update_interface)
